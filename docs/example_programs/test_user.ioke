
{# The following reference to Test will automatically do something akin to 
      <code>use test</code>
   where use is a macro that expands to something nifty #}


# ensure should be possible to use anywhere, and will directly run
# the test assertion at that point if it's not within a Test block
# if it fails it will raise some kind of exception
# if it doesn't fail it will contribue to some global count in the Test module




Test {

     # Groups aren't needed, but can be nice.
     group("Arithmetic tests",

         # Groups can be specificed with Strings too:
         "String grouping example" {
           # expect can be used as an alias to ensure
           expect(10+20) is not > 31
         }

         # Group without any tests within it will actually 
         group("Addition tests")

         # Regular is helper checks arg argument with regular equality
         ensure(0+0) is(0)
         ensure(0+1) is(1)
         ensure(1+0) is(1)
         ensure(1+1) is(2)

         # The return of "that" can always be used for several things, including calling most comparisons directly
         ensure(20+30) == 50

         ensure( 20 + 20 + 
                 20 + 20 +
                 20 + 20 +
                 20 + 20 +
                 20 + 20 ) is(200)

         # The return of the is method without any arguments is the same
         # matcher sent in to it, but it will also include a "waiting" matcher
         # that reports an error if nothing has been called on the other side.
         ensure(10000000000000000000000000 + 10000000000000000) is >(10000000000000000)

         # Short hand for true values
         ensure(true)

         # Between is a simple matcher
         ensure(1.1 + 2.2) is between(3.2, 3.4)

         # This is more or less the same, where === have the same meaning as in Ruby
         ensure(1.1 + 2.2) === 3.2...3.4

         # This is more or less the same, where is in is ===
         ensure(1.1 + 2.2) is in 3.2..3.4

         # Doing an explicit conversion of a matcher
         ensure(2) is not > 3

         # Returns an inverted matcher, that always fails where "that" will succeed
         never(false)

         group("Multiplication tests",
            ensure(2*2) == 4

            # Test that there is no overflow for large numbers
            ensure(1000000000000000000000000000000000*1000000000000000000000000000000000) >= 1000000000000000000000000000000000000000000000000000000000000000000
         )
     )
}
